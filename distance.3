.\"
.\" Copyright (c) 2004 Jose Nazario <jose@monkey.org> and Evan Cooke.
.\"
.\" $Id: distance.3,v 1.6 2004/11/29 22:08:23 jose Exp $
.\"
.Dd February 14, 2004
.Dt DISTANCE 3
.Os
.Sh NAME
.Nm distance
.Nd compute the distance between two pieces of data
.Sh SYNOPSIS
.Fd #include <distance.h>
.Ft int 
.Fn levenshtein_d "const void *d1" "size_t len1" "const void *d2" "size_t len2"
.Ft int 
.Fn damerau_d "const void *d1" "size_t len1" "const void *d2" "size_t len2"
.Ft double
.Fn needleman_wunsch_d "const void *d1" "size_t len1" "const void *d2" "size_t len2" "matrix *m"
.Ft int 
.Fn hamming_d "const void *d1" "size_t len1" "const void *d2" "size_t len2"
.Ft void
.Fn bloom_create "const void *data" "size_t len" "const void *digest" "size_t digest_len"
.Ft double
.Fn bloom_d "const void *digest1" "const void *digest2" "size_t digest_len"
.Ft float
.Fn jaccard_d "const void *d1" "size_t len1" "const void *d2" "size_t len2"
.Ft float
.Fn minkowski_d "const void *d1" "size_t len1" "const void *d2" "size_t len2" "int power"
.Fn MANHATTAN_D "const void *d1" "size_t len1" "const void *d2" "size_t len2" 
.Fn EUDCLID_D "const void *d1" "size_t len1" "const void *d2" "size_t len2" 
.\"
.Sh DESCRIPTION
The 
.Nm
library is used to compare pieces of data for similarity. Specifically, it 
contains a number of methods to find the "edit distance" between inputs,
or the number of differences between them. These differences are calculated
using various mechanisms.
.Pp
Inputs are operated on pairwise as
.Fa *s
and 
.Fa *t
and the edit distance value is returned.
.\"
.Sh LEVENSHTEIN DISTANCES
Levenshtein distance (LD) is a measure of the similarity between two 
inputs, which we will refer to as the source 
.Fa s 
and the target 
input 
.Fa t . 
The distance is the number of deletions, insertions, or substitutions 
required to transform 
.Fa s 
into 
.Fa t . 
For example,
.Pp
If s is "test" and t is "test", then LD(s,t) = 0, because no 
transformations are needed. The strings are already identical.
.Pp
If s is "test" and t is "tent", then LD(s,t) = 1, because one 
substitution (change "s" to "n") is sufficient to transform s into t. 
.Pp
The greater the Levenshtein distance, the more different the inputs are.
.Pp
Levenshtein distance is named after the Russian scientist Vladimir 
Levenshtein, who devised the algorithm in 1965. If you can't spell or 
pronounce Levenshtein, the metric is also sometimes called edit distance. 
.\"
.Sh DAMERAU DISTANCE
The Damerau distance is almost identical to the Levenshtein distance but
can tolerate adjascent characters that have been swapped, a common 
spelling mistake or typographic error. For example, if s is "abcd" and t 
is "acbd", then DD(s,t) is 0 because of the transposition of "b" and "c". 
Other costs found in the Levenshtein distance are identical.
.\"
.Sh NEEDLEMAN-WUNSCH DISTANCE
The Levenshtein distance algorithm assumes that the cost of all 
insertions or conversions is equal. However, in some scenarios this
may not be desirable and may mask the acceptable distances between
inputs.
.Pp
A modified Levenshtein distance algorithm, also known as the Needleman-Wunsch 
distance algorithm, accepts a cost matrix as
an extra input. This matrix structure contains two cost matricies
for each pair of characters to convert from and to. The costs of
inserting this character and converting between characters is 
listed in this matrix. The structure of the matrix is as follows:
.Bd -literal
struct matrix {
        char    input[255];
        float   conversion[255][255];
        float   insertion[255][255];
};
.Pp
.Ed
These values should be assigned before the distance algorithm is 
used.
.\"
.Sh HAMMING DISTANCES
The Hamming distance H is defined only for inputs of the same length. 
For two inputs 
.Fa s 
and 
.Fa t , 
H(s, t) is the number of places in which the two string differ, i.e., 
have different characters.
.\"
.Sh BLOOM FILTER DISTANCES
A Bloom Filter (BF) is a method of encoding a variable length piece of
input data to a fixed length signature.  The basic idea is to map
attributes of the data to specific positions in a binary vector.  First,
the result vector is initialized to all 0's.  Next, a series of hash
functions are applied to the data to map some part of the input data
to a position in the result vector.  Thus, if a is the input data,
and m is length of the result vector, then hash(a) produces a value in the
range 0...m-1.
.Pp
A similar method encoding data into a fixed length result vector can be
accomplished using a crytographic digest.  A digest function like MD5
is designed such that the difference between any two digests does not in
any way correlate to similar differences in input messages.  This is 
an important property in certain applications however it may also be 
desirable that the difference between digests corresponds to
differences in the input messages.  Because a Bloom filter is derived from
attributes of the input message, the difference between any two Bloom
Filter digests corresponds to differences in the input data.
.Pp
This Bloom filter implementation is meant take any byte sequence as input
so a generic hash function is used.  The input stream is divided into
chunks and hashed using a 32 bit adler modulo m.  In order to get the most
complete coverage, the chunk N+1 includes all but one of the bytes in
chunk N and one byte not included in chunk N.  (i.e. the chunk window
slides to right one byte per hash.)
.Pp
The difference between any two Bloom filter digests is computed by taking
the logical and of the two digests and computing the number of bit of
similarity.  The similar count is then divided by maximum of the total
number of bit in either digest.  This acts to normalize the bit count for
large and small signatures.  The similarity is then turned into a distance
by take 1 - normalized bit count.
.\"
.Sh JACCARD DISTANCE
The Jaccard similarity between two strings is the ratio of the size of their 
intersection to the size of their union. This distance is 1 minus this 
similarity sscore. Indentical strings have a Jacard distance of 0, 
completely dissimilar strings have a score of 1. The two inputs must be
of the same size.
.\"
.Sh MINKOWSKI DISTANCE
The Minkowski distance between two strings is the geometric distance between
two inputs and uses a variable scaling factor,
.Fa power .
When this value is 1 the Minkowski distance is equal to the Manhattan
distance. When
.Fa power 
is 2 it yields the Euclidian distance between two strings. When this 
value grows, the value of the Minkowski distance tends towards a
Chebyshev result. Therefore by inceasing 
.Fa power , 
one can place more numerical value on the largest distance (in terms of 
elements in the two vectors in question). Two macros are provided for 
these modifications to the Minkowski distance,
.Fn EUCLID_D
and 
.Fn MANHATTAN_D .
.Pp
A disadvantage of the Minkowski method is that if one element in the 
vectors has a wider range than the other elements then that large 
range may 'dilute' the distances of the small-range elements. 
.\"
.Sh RETURN VALUES
Each fuction returns the calculated distance between the two inputs.
A distance of 0 indicates that the strings are the same. A distance
less than 0 indicates that an error has occurred. For the Hamming
and Jaccard distances, this is because the two inputs are of different 
sizes.
.Sh BUGS
The 
.Fn minkowski_d
implementation is possibly broken, as are the 
.Fn MANHATTAN_D 
and 
.Fn EUCLID_D 
macros.
.Sh AUTHOR
Lorenzo Seidenari wrote the Levenshtein distance implementation.
.Pp
Jose Nazario
.Aq jose@monkey.org
wrote the implementations of the Damerau, Hamming and Jaccard distance 
algorithms along with the Needleman-Wunsch Levenshtein distance 
implementation here.
.Pp
Evan Cooke
.\" .Aq ecooke@eecs.umich.edu
adapted the adler32 routine from Jean-loup Gailly and Mark Adler used in the
.Fn bloom_d
function, which he also wrote.
.Sh SEE ALSO
.Rs
.%A V. I. Levenshtein 
.%T Binary codes capable of correcting deletions, insertions and reversals
.%J "Doklady Akademii Nauk SSSR" 
.%N 4 
.%V 163
.%P 845-848 
.%D 1965
.Re
.Rs
.%A Fred J. Damerau 
.%T A technique for computer detection and correction of spelling errors 
.%J Communications of the ACM 
.%V 7 
.%N 3
.%P 171-176 
.%D March 1964
.Re
.Rs 
.%A S. B. Needleman 
.%A C. D. Wunsch
.%T A general method applicable to the search for similarities in the amino acid sequence of two proteins
.%J "Jrnl Molec Biol" 
.%V 48 
.%P 443-453 
.%D 1970
.Re
.Rs
.%A Burton Bloom
.%T Space/time trade-offs in hash coding with allowable errors
.%J Communications of the ACM
.%V 13
.%N 7
.%P 422-426 
.%D July 1970
.Re
.Rs
.%A R. W. Hamming 
.%T Error Detecting and Error Correcting Codes 
.%J Bell System Tech Journal
.%V 9
.%P 147-160 
.%D April 1950
.Re
.Rs
.%A P. Jaccard
.%T Etude comparative de la distribution florale dans une portion des Alpes et du Jura
.%J Bull Soc Vaudoise Sci Nat
.%V 44 
.%P 223-270
.%D 1908
.Re
